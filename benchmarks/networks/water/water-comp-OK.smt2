(set-logic QF_NRA_ODE)
(declare-fun x () Real)
(declare-fun vx () Real)
(declare-fun tr () Real)
(declare-fun pr () Real)
(declare-fun on () Real)
(declare-fun in () Real)
(declare-fun x_0_0 () Real)
(declare-fun x_0_t () Real)
(declare-fun x_1_0 () Real)
(declare-fun x_1_t () Real)
(declare-fun x_2_0 () Real)
(declare-fun x_2_t () Real)
(declare-fun vx_0_0 () Real)
(declare-fun vx_0_t () Real)
(declare-fun vx_1_0 () Real)
(declare-fun vx_1_t () Real)
(declare-fun vx_2_0 () Real)
(declare-fun vx_2_t () Real)
(declare-fun tr_0_0 () Real)
(declare-fun tr_0_t () Real)
(declare-fun tr_1_0 () Real)
(declare-fun tr_1_t () Real)
(declare-fun tr_2_0 () Real)
(declare-fun tr_2_t () Real)
(declare-fun pr_0_0 () Real)
(declare-fun pr_0_t () Real)
(declare-fun pr_1_0 () Real)
(declare-fun pr_1_t () Real)
(declare-fun pr_2_0 () Real)
(declare-fun pr_2_t () Real)
(declare-fun on_0_0 () Real)
(declare-fun on_0_t () Real)
(declare-fun on_1_0 () Real)
(declare-fun on_1_t () Real)
(declare-fun on_2_0 () Real)
(declare-fun on_2_t () Real)
(declare-fun in_0_0 () Real [8.0])
(declare-fun in_0_t () Real [8.0])
(declare-fun in_1_0 () Real [8.0])
(declare-fun in_1_t () Real [8.0])
(declare-fun in_2_0 () Real [8.0])
(declare-fun in_2_t () Real [8.0])
(declare-fun time_0 () Real)
(declare-fun time_1 () Real)
(declare-fun time_2 () Real)
(declare-fun mode_0 () Real)
(declare-fun mode_1 () Real)
(declare-fun mode_2 () Real)
(define-ode flow_1 ((= d/dt[in] 0) (= d/dt[on] 0) (= d/dt[pr] -1) (= d/dt[tr] -1) (= d/dt[vx] 0) (= d/dt[x] (+ (* on (/ (+ 4 (* (^ (* 2 9.80665) 0.5) (- (* 0.5 (^ in 0.5)) (* 0.6 (^ x 0.5))))) 2)) (* (- 1 on) (/ (* (^ (* 2 9.80665) 0.5) (- (* 0.5 (^ in 0.5)) (* 0.6 (^ x 0.5)))) 2))))))
(define-ode flow_2 ((= d/dt[in] 0) (= d/dt[on] 0) (= d/dt[pr] -1) (= d/dt[tr] -1) (= d/dt[vx] 0) (= d/dt[x] (+ (* on (/ (+ 4 (* (^ (* 2 9.80665) 0.5) (- (* 0.5 (^ in 0.5)) (* 0.6 (^ x 0.5))))) 2)) (* (- 1 on) (/ (* (^ (* 2 9.80665) 0.5) (- (* 0.5 (^ in 0.5)) (* 0.6 (^ x 0.5)))) 2))))))
(define-ode flow_3 ((= d/dt[in] 0) (= d/dt[on] 0) (= d/dt[pr] -1) (= d/dt[tr] -1) (= d/dt[vx] 0) (= d/dt[x] (+ (* on (/ (+ 4 (* (^ (* 2 9.80665) 0.5) (- (* 0.5 (^ in 0.5)) (* 0.6 (^ x 0.5))))) 2)) (* (- 1 on) (/ (* (^ (* 2 9.80665) 0.5) (- (* 0.5 (^ in 0.5)) (* 0.6 (^ x 0.5)))) 2))))))
(assert (<= 0 x_0_0))
(assert (<= x_0_0 50))
(assert (<= 0 x_0_t))
(assert (<= x_0_t 50))
(assert (<= 0 x_1_0))
(assert (<= x_1_0 50))
(assert (<= 0 x_1_t))
(assert (<= x_1_t 50))
(assert (<= 0 x_2_0))
(assert (<= x_2_0 50))
(assert (<= 0 x_2_t))
(assert (<= x_2_t 50))
(assert (<= 0 vx_0_0))
(assert (<= vx_0_0 50))
(assert (<= 0 vx_0_t))
(assert (<= vx_0_t 50))
(assert (<= 0 vx_1_0))
(assert (<= vx_1_0 50))
(assert (<= 0 vx_1_t))
(assert (<= vx_1_t 50))
(assert (<= 0 vx_2_0))
(assert (<= vx_2_0 50))
(assert (<= 0 vx_2_t))
(assert (<= vx_2_t 50))
(assert (<= 0 tr_0_0))
(assert (<= tr_0_0 1))
(assert (<= 0 tr_0_t))
(assert (<= tr_0_t 1))
(assert (<= 0 tr_1_0))
(assert (<= tr_1_0 1))
(assert (<= 0 tr_1_t))
(assert (<= tr_1_t 1))
(assert (<= 0 tr_2_0))
(assert (<= tr_2_0 1))
(assert (<= 0 tr_2_t))
(assert (<= tr_2_t 1))
(assert (<= 0 pr_0_0))
(assert (<= pr_0_0 1))
(assert (<= 0 pr_0_t))
(assert (<= pr_0_t 1))
(assert (<= 0 pr_1_0))
(assert (<= pr_1_0 1))
(assert (<= 0 pr_1_t))
(assert (<= pr_1_t 1))
(assert (<= 0 pr_2_0))
(assert (<= pr_2_0 1))
(assert (<= 0 pr_2_t))
(assert (<= pr_2_t 1))
(assert (<= 0 on_0_0))
(assert (<= on_0_0 1))
(assert (<= 0 on_0_t))
(assert (<= on_0_t 1))
(assert (<= 0 on_1_0))
(assert (<= on_1_0 1))
(assert (<= 0 on_1_t))
(assert (<= on_1_t 1))
(assert (<= 0 on_2_0))
(assert (<= on_2_0 1))
(assert (<= 0 on_2_t))
(assert (<= on_2_t 1))
(assert (<= 0 in_0_0))
(assert (<= in_0_0 50))
(assert (<= 0 in_0_t))
(assert (<= in_0_t 50))
(assert (<= 0 in_1_0))
(assert (<= in_1_0 50))
(assert (<= 0 in_1_t))
(assert (<= in_1_t 50))
(assert (<= 0 in_2_0))
(assert (<= in_2_0 50))
(assert (<= 0 in_2_t))
(assert (<= in_2_t 50))
(assert (<= 0 time_0 [0.000000]))
(assert (<= time_0 1 [0.000000]))
(assert (<= 0 time_1 [0.000000]))
(assert (<= time_1 1 [0.000000]))
(assert (<= 0 time_2 [0.000000]))
(assert (<= time_2 1 [0.000000]))
(assert (<= 1 mode_0))
(assert (<= mode_0 3))
(assert (<= 1 mode_1))
(assert (<= mode_1 3))
(assert (<= 1 mode_2))
(assert (<= mode_2 3))
(assert (and (and (= pr_0_0 1) (or (= on_0_0 1) (= on_0_0 0)) (< in_0_0 (+ 10 3)) (< (- 8 3) in_0_0) (< vx_0_0 (+ 10 2)) (< (- 8 2) vx_0_0) (< x_0_0 (+ 10 2)) (< (- 8 2) x_0_0) (<= tr_0_0 0.08) (<= 0.02 tr_0_0)) (= mode_0 1) (= [in_0_t on_0_t pr_0_t tr_0_t vx_0_t x_0_t] (integral 0. time_0 [in_0_0 on_0_0 pr_0_0 tr_0_0 vx_0_0 x_0_0] flow_1)) (= mode_0 1) (= mode_1 2) (= tr_0_t 0) (= pr_1_0 pr_0_t) (= tr_1_0 0.1) (= on_1_0 on_0_t) (= in_1_0 in_0_t) (= vx_1_0 x_0_t) (= x_1_0 x_0_t) (= [in_1_t on_1_t pr_1_t tr_1_t vx_1_t x_1_t] (integral 0. time_1 [in_1_0 on_1_0 pr_1_0 tr_1_0 vx_1_0 x_1_0] flow_2)) (= mode_1 2) (= mode_2 3) (= tr_1_t 0) (= pr_2_0 pr_1_t) (= tr_2_0 pr_1_t) (or (and (= on_2_0 0) (>= vx_1_t 8) (= on_1_t 0)) (and (= on_2_0 1) (< vx_1_t 8) (= on_1_t 0)) (and (= on_2_0 0) (> vx_1_t 10) (= on_1_t 1)) (and (= on_2_0 1) (<= vx_1_t 10) (= on_1_t 1))) (= in_2_0 in_1_t) (= vx_2_0 vx_1_t) (= x_2_0 x_1_t) (= [in_2_t on_2_t pr_2_t tr_2_t vx_2_t x_2_t] (integral 0. time_2 [in_2_0 on_2_0 pr_2_0 tr_2_0 vx_2_0 x_2_0] flow_3)) (= mode_2 3) (= mode_2 3) (or (>= x_2_t (+ 10 2)) (>= (- 8 2) x_2_t)) (= pr_2_t 0)))
(check-sat)
(exit)
